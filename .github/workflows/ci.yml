name: CI jobs
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  linux-x86_64:
    runs-on: ubuntu-latest
    container: nvidia/cuda:10.1-cudnn7-devel-centos7
    strategy:
      matrix:
        ext: ["", -mkl, -gpu, -mkl-gpu]
    steps:
      - name: Install environment
        run: |
          yum -y update
          yum -y install centos-release-scl-rh epel-release
          yum -y install java-1.8.0-openjdk-devel devtoolset-7 rh-git218 patch python36-devel python36-pip python36-six
          echo Downloading Maven
          curl -L https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz -o $HOME/apache-maven-3.6.3-bin.tar.gz
          tar xzf $HOME/apache-maven-3.6.3-bin.tar.gz -C /opt/
          ln -sf /opt/apache-maven-3.6.3/bin/mvn /usr/bin/mvn
          echo Downloading Bazel
          curl -L https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel-2.0.0-installer-linux-x86_64.sh -o bazel.sh --retry 10
          bash bazel.sh
      - name: Checkout repository
        uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source scl_source enable devtoolset-7 rh-git218 || true
          git --version
          gcc --version
          mvn -version
          bazel version
          sed -i.bak -e "s/0.1.0-SNAPSHOT/0.1.0-PELTARION-${{ github.sha }}/" `find . -name 'pom.xml'`
          mvn clean install -B -U -e -Djavacpp.platform=linux-x86_64 -Djavacpp.platform.extension=${{ matrix.ext }}
      - name: Build TF Text
        run: |
          curl -L https://github.com/tensorflow/text/archive/v2.2.1.tar.gz -o tensorflow-text-v2.2.1.tar.gz
          tar xzf tensorflow-text-v2.2.1.tar.gz
          ./text-2.2.1/oss_scripts/run_build.sh
      - name: Upload artifact
        uses:  actions/upload-artifact@v2
        with:
          name: linux-jars${{ matrix.ext }}
          path: /root/.m2/repository/org/tensorflow/**/*
  macosx-x86_64:
    runs-on: macos-latest
    strategy:
      matrix:
        ext: ["", -mkl]
    steps:
      - name: Install environment
        run: |
          python3 -m pip install six
          echo Downloading Bazel
          curl -L https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel-2.0.0-installer-darwin-x86_64.sh -o bazel.sh --retry 10
          bash bazel.sh
          brew install libomp
      - name: Checkout repository
        uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Build project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git --version
          clang --version
          mvn -version
          bazel version
          mkdir -p $HOME/.m2
          sed -i .bak -e "s/0.1.0-SNAPSHOT/0.1.0-PELTARION-${{ github.sha }}/"  `find . -name 'pom.xml'`
          mvn clean install -B -U -e -Djavacpp.platform=macosx-x86_64 -Djavacpp.platform.extension=${{ matrix.ext }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-jars${{ matrix.ext }}
          path: /Users/runner/.m2/repository/org/tensorflow/**/*

  # redeploy:
  #   needs: [linux-x86_64, macosx-x86_64]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v1
  #     - name: Setup Java
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 1.8
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: macos-jars
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: macos-jars-mkl
  #     - name: Redeploy snapshot artifacts
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         cd tensorflow-core
  #         mvn dependency:resolve -Predeploy -N -B -U -e -Djavacpp.platform.custom -Djavacpp.platform.linux-x86_64 -Djavacpp.platform.macosx-x86_64
  #         cp $HOME/.m2/repository/org/tensorflow/tensorflow-core-api/*-SNAPSHOT/tensorflow-core-api-*-SNAPSHOT*.jar .
  #         for f in *.jar; do
  #           if [[ $f =~ tensorflow-core-api-.*SNAPSHOT-(.*).jar ]]; then
  #              [[ -n $FILES ]] && FILES=$FILES,$f || FILES=$f
  #              [[ -n $TYPES ]] && TYPES=$TYPES,jar || TYPES=jar
  #              [[ -n $CLASSIFIERS ]] && CLASSIFIERS=$CLASSIFIERS,${BASH_REMATCH[1]} || CLASSIFIERS=${BASH_REMATCH[1]}
  #           fi
  #         done
  #         mvn clean deploy -Predeploy -N -B -U -e -Dfiles=$FILES -Dtypes=$TYPES -Dclassifiers=$CLASSIFIERS
